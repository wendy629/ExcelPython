import sys
import time
import java.math.BigDecimal as BigDecimal
import java.sql as sql
import com.hyperion.aif.scripting.API as API


print(sys.version)

fdmAPI = API()
conn = None
conn = sql.DriverManager.getConnection("jdbc:oracle:thin:@192.168.4.244:1530:hd01", "FDMEE", "orahd01");
conn.setAutoCommit(False)
fdmAPI.initializeDevMode(conn);
print "SUCCESS CONNECTING TO DB"
fdmContext = fdmAPI.initContext(BigDecimal(15684))
print fdmContext
print fdmContext["LOCNAME"]
print fdmContext["LOCKEY"]
print fdmContext["APPID"] 
print fdmContext["RULEID"] 

locname=fdmContext["LOCNAME"]
pername=fdmContext["PERIODNAME"][:3]


def prepare_str(val):
    if val:
        if type(val) is str or type(val) is unicode:
            return val.strip().replace("'", "''")[:74]
        else:
            return val.toString().strip().replace("'", "''")[:74]
    return 'Null'

RSet = fdmAPI.executeQuery("SELECT nvl(b.PARTNAME, a.PARTNAME) PartLocation FROM TPOVPARTITION a left join TPOVPARTITION b ON a.partparentkey=b.PARTITIONKEY WHERE a.PARTNAME = '"+locname+"'", []) 
print "SELECT nvl(b.PARTNAME, a.PARTNAME) PartLocation FROM TPOVPARTITION a left join TPOVPARTITION b ON a.partparentkey=b.PARTITIONKEY WHERE a.PARTNAME = '%s' " % locname

if RSet.next(): pl = RSet.getString('PartLocation')

if pl == 'LOC_CONSBX_BPS' :
#if 1==1:
    print "--Target App is found"
    try:
  
        path = 'C:\poi'
        sys.path.append(path + '\poi-3.15.jar')
        sys.path.append(path + '\poi-ooxml-3.15.jar')
        sys.path.append(path + '\poi-ooxml-schemas-3.15.jar')

        #from org.apache.poi.xssf.usermodel import *
        #from org.apache.poi.hssf.usermodel import *
        import org.apache.poi.xssf.usermodel.XSSFWorkbook as XSSFWorkbook
        import org.apache.poi.xssf.usermodel.XSSFSheet as XSSFSheet
        import org.apache.poi.xssf.usermodel.XSSFRow as XSSFRow
        import org.apache.poi.xssf.usermodel.XSSFCell as XSSFCell
        import org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator as XSSFFormulaEvaluator
        import org.apache.poi.hssf.usermodel.HSSFWorkbook as HSSFWorkbook
        import org.apache.poi.hssf.usermodel.HSSFSheet as HSSFSheet
        import org.apache.poi.hssf.usermodel.HSSFRow as HSSFRow
        import org.apache.poi.hssf.usermodel.HSSFCell as HSSFCell
        import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator as HSSFFormulaEvaluator
        from java.io import FileInputStream
        from org.apache.poi.ss.usermodel import *
        from datetime import datetime
        
        import java.io as io
        
        #Create a folder with time stamp

        folder = io.File("OGO")
        
        #folder = io.File("C:TCUBF")
        #folder = io.File("C:hos")
        #print "folder path is: %s" % folder
        #copyFolder = io.File(folder.getAbsolutePath()+ "\\" + datetime.now().strftime('%Y%m%d_%H%M%S'))
        #print "folder with timestamp locates at: %s" % copyFolder
        #copyFolder.mkdir()
        

        
        #Delete so will not reload the previously file?
        
        print "Start SQL delete"
        delSQL = "DELETE FROM AIF_OPEN_INTERFACE WHERE BATCH_NAME = 'CONSBX'"
        fdmAPI.executeDML(delSQL, [], True)
        fdmAPI.commitTransaction()
        
        print "Start SQL pre-insert"
        
        #correct
        inspreSQL = " INTO AIF_OPEN_INTERFACE (BATCH_NAME, CURRENCY, DATAVIEW, DESC1, DESC2, AMOUNT, COL01, COL02)"
        #try-WORKS EXCEPT RECORD CONTAINS &
        #inspreSQL = "INSERT INTO AIF_OPEN_INTERFACE (BATCH_NAME, CURRENCY, DATAVIEW, DESC1, DESC2, AMOUNT, COL01, COL02, COL03, COL04, COL05, COL06)"
        for fileEntry in folder.listFiles():
           if fileEntry.isFile():
                sSQL = ""
                file = folder.getAbsolutePath() + "\\" + fileEntry.getName()
                fis = FileInputStream(file)

                '''
                if fileEntry.getName().split(".")[-1]=='xlsm':
                #  print 'yes'
                  wb = XSSFWorkbook(fis)
                  sheetob1=wb.getSheetAt(1)
                  sheetob2=wb.getSheetAt(2)
                #print sheetob1
                  sheetname1 = sheetob1.getSheetName()
                  sheetname2 = sheetob2.getSheetName()
                #print "sheetname1=%s" % sheetname1
                #print "sheetname2=%s" % sheetname2
                  if sheetname1=='Sheet1':
                    sheet = wb.getSheet(sheetname1)
                  #print "sheet 1 wins"
                  else:
                    sheet = wb.getSheet(sheetname2)
                  #print "sheet 2 wins"
                '''
                #else:
                wb = XSSFWorkbook(fis)
                sheet = wb.getSheet('TB')
               
                #wb = XSSFWorkbook(fis)
                #sheet = wb.getSheet('Sheet1')


                rows = sheet.getPhysicalNumberOfRows()
                rNum = 5
                
                while True:
                    row = sheet.getRow(rNum)
                    cell = row.getCell(0).toString().strip()
                    
                    insSQL = inspreSQL + " VALUES ('CONSBX', 'CAD', 'YTD', '" + prepare_str(row.getCell(0)) + "', " + "'" + prepare_str(str(fileEntry.getName())) + "' , "
                    
                    evaluator = wb.getCreationHelper().createFormulaEvaluator()
                    if row.getCell(4) and row.getCell(4).toString().strip(): 
                        cellValue = evaluator.evaluate(row.getCell(4))
                        insSQL = insSQL + str(cellValue.getNumberValue()) + ", "
                    else:
                        insSQL = insSQL + "Null , "
                        cellValue = '0'
                        
                      
                    #formatter = DataFormatter()  
                    #icpName = evaluator.evaluate(row.getCell(2))
                    
                    evaluator = wb.getCreationHelper().createFormulaEvaluator()
                    if row.getCell(1) and row.getCell(1).toString().strip(): 
                        cell1Value = evaluator.evaluate(row.getCell(1))
                        if str(cell1Value.getStringValue())!='None':
                            insSQL = insSQL + "'" +  str(cell1Value.getStringValue()) + "'" + ", "
                        else:
                            formatter = DataFormatter()
                            insSQL = insSQL + "'" + formatter.formatCellValue(row.getCell(1)) + "', " 
                    if row.getCell(2) and row.getCell(2).toString().strip(): 
                        
                        cell2Value = evaluator.evaluate(row.getCell(2))
                        formatter = DataFormatter()
                        '''
                        print rNum 
                        print "string" + str(cell2Value.getStringValue())
                        print "formater" +formatter.formatCellValue(row.getCell(2)) 
                        '''
                        #if str(cell2Value.getStringValue())!='None':
                        insSQL = insSQL + "'" + str(cell2Value.getStringValue()) + "'" + ") "
                        #elif formatter.formatCellValue(row.getCell(2))!='None':
                         #   insSQL = insSQL + "'" + formatter.formatCellValue(row.getCell(2)) + "')" 
                    else:
                        insSQL = insSQL +"'None'"+")"
                    #insSQL = insSQL + "'" + formatter.formatCellValue(row.getCell(1)) + "', '" 
                    #insSQL = insSQL + str(icpName.getNumberValue()) + "')"
                    
    
                    if cellValue != '0' and cellValue.getNumberValue() != 0 : 
                        insSQL= insSQL.encode('utf8')
                        #print insSQL
                        sSQL = sSQL + insSQL
                        #try
                        #sSQL = sSQL + insSQL + ';' 
                        #fdmAPI.executeDML(insSQL, [], True)
                        #print sSQL
                    rNum = rNum + 1
                    
                    if 'please specify: (3)' in cell:
                    #if cellDR == cellCR:
                    #if not cell:
                        break
                    '''
                    if rNum%200==0:
                      print rNum
                      print "sql statement:" + 'INSERT /*+ APPEND */ ALL'+ sSQL + ' select * from dual;'
                      sSQL=""
                      insSQL=""
                    '''
                #fdmAPI.executeDML(sSQL, [], True)
                #fdmAPI.executeDML('INSERT ALL '+ sSQL + 'select * from dual;', [], True)
                #CORRECT
                print rNum
                print "sql statement:" + 'INSERT /*+ APPEND */ ALL'+ sSQL + ' select * from dual;'
                #TRY
                #print "sql statement:" + sSQL 
                #print "##########"
                #fdmAPI.commitTransaction()
                fis.close()

                #print "start to move file"
                #fl = io.File(folder.getAbsolutePath() + "\\" + fileEntry.getName())
                #newFl = io.File(copyFolder.getAbsolutePath() + "\\" + fileEntry.getName())
                #fl.renameTo(newFl)

          
    except:
  
        fdmAPI.logError("BefImport. Error: %s %s" % (sys.exc_info()[0], sys.exc_info()[1]))
        fdmAPI.logError("insSQL: %s " % (insSQL))
        raise

#print "fl is %s" % fl
#print "newFl is %s" % newFl
    print "OGO file load End"